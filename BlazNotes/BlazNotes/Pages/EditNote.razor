@page "/edit/{Id:int}"
@inject IToastService toastService
@inject INoteService noteService

<h1>Edit note</h1>
<div class="card card-@Theme">
    <div class="card-body">
        <EditForm Model="@command" OnValidSubmit="@UpdateNoteAsync">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" class="form-control" placeholder="Input title here" bind="@command.Title" name="title" />
                <CustomValidationMessage For="@(() => command.Title)" Class="@("validation-message validation-message-" + Theme)" />
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <textarea name="description" rows="5" class="form-control" placeholder="Input description here" bind="@command.Description"></textarea>
                <CustomValidationMessage For="@(() => command.Description)" Class="@("validation-message validation-message-" + Theme)" />
            </div>
            <button type="button" class="btn btn-secondary btn-secondary-@Theme" onclick=@RestoreContentAsync>Restore</button>
            <button type="submit" class="btn btn-success btn-success-@Theme">Update</button>
        </EditForm>
    </div>
</div>

@functions
{
    [CascadingParameter(Name = "Theme")] string Theme { get; set; }

    [Parameter]
    public int Id { get; set; }

    string title;
    string description;
    UpdateNoteCommand command;

    protected override async Task OnInitAsync()
    {
        command = new UpdateNoteCommand(await noteService.ReadAsync(Id));

        await SetRestoreVariables();
    }

    async Task UpdateNoteAsync()
    {
        try
        {
            await noteService.UpdateAsync(Id, command.Title, command.Description);
            toastService.ShowSuccess("Note updated!", "Success");
        }
        catch (Exception)
        {

            toastService.ShowError("Something went wrong!", "Failed");
        }
    }

    async Task SetRestoreVariables()
    {
        await Task.FromResult(title = command.Title);
        await Task.FromResult(description = command.Description);
    }

    async Task RestoreContentAsync()
    {
        await Task.FromResult(command = new UpdateNoteCommand());
        command.Title = title;
        command.Description = description;
    }
}